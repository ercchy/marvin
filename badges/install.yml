---
# This playbook sets up badges on a server.
# pass the host and user as extra variables.

- hosts: $host
  user: $user
  sudo: yes

  vars_files:
  - vars/common.yml
  - vars/credentials_${host}.yml

  tasks:
  - name: update apt packages
    apt: update-cache=yes

  - name: install required software packages
    apt: pkg=$item state=installed
    with_items:
    - git
    - python-dev
    - python-setuptools
    - libssl-dev
    - gettext
    - python-iso8601
    - apache2
    - libapache2-mod-wsgi
    - postgresql
    - libpq-dev
    - python-psycopg2
    - rake
    - build-dep
    - python-imaging

  - name: create symlinks for imaging libraries
    shell: ln -s /usr/lib/`uname -i`-linux-gnu/libfreetype.so /usr/lib/
    shell: ln -s /usr/lib/`uname -i`-linux-gnu/libjpeg.so /usr/lib/
    shell: ln -s /usr/lib/`uname -i`-linux-gnu/libz.so /usr/lib/

  - name: create badges user
    user: name=badges

  - name: check out badges code
    git: repo=${badges_github_repository} dest=/opt/badges version=${badges_github_version}

  - name: init git submodule
    command: /usr/bin/env git submodule init chdir=/opt/badges

  - name: git submodule update
    command: /usr/bin/env git submodule update chdir=/opt/badges

  - name: update permissions for badges directory
    command: /bin/chown -R badges:badges /opt/badges

  - name: create badges.log file
    command: /usr/bin/touch /opt/badges/badges/badges/badges.log

  - name: set permissions for badges.log
    file: path=/opt/badges/badges/badges/badges.log state=file owner=badges group=www-data mode=0664

  - name: install pip
    easy_install: name=$item
    with_items:
    - pip

  - name: install required global python packages (required by ansible)
    pip: name=$item state=present
    with_items:
    - boto
    - hashlib

  - name: copy s3get to server (required by ansible)
    copy: src=./files/s3get.py dest=/opt/badges owner=badges group=badges mode=644

  - name: install virtualenv
    pip: name=$item
    with_items:    
    - virtualenv

  - name: get path for virtuanenv
    command: /usr/bin/which virtualenv
    register: virtualenv

  - name: create python virtual environment
    command: ${virtualenv.stdout} --distribute $badges_venv

  - name: install badges dependencies in virtual environment
    pip: requirements=/opt/badges/badges/requirements.txt virtualenv=$badges_venv

  - name: get code for sass
    git: repo=https://github.com/nex3/sass.git dest=/opt/sass version=3.2.7

  - name: install sass compiler
    command: /usr/bin/env rake install chdir=/opt/sass

  - name: configure badges settings_local.py
    template: src=templates/opt_badges_badges_badges_settings_local.py.j2 dest=/opt/badges/badges/badges/settings_local.py mode=0640 owner=badges group=www-data

  - name: create uploads directory
    file: path=/opt/badges/badges/uploads state=directory owner=badges group=www-data mode=0775

  - name: create uploads/images directory
    file: path=/opt/badges/badges/uploads/images state=directory owner=badges group=www-data mode=0775

  - name: create static files directory
    file: path=/opt/badges/badges/staticfiles state=directory owner=badges group=www-data mode=0775


# Run as postgres user to create badges DB
- hosts: $host
  user: $user
  sudo: yes
  sudo_user: postgres
  gather_facts: no

  vars_files:
  - vars/common.yml
  - vars/credentials_${host}.yml

  tasks:
  - name: create postgresql user
    postgresql_user: name=$badges_db_user password=$badges_db_password role_attr_flags=CREATEDB,LOGIN

  - name: create postgresql database
    postgresql_db: encoding=utf8 lc_collate=C lc_ctype=C name=$badges_db_name login_user=$badges_db_user login_password=$badges_db_password login_host=127.0.0.1 template=template0


# Finish initial installation
- hosts: $host
  user: $user
  sudo: yes

  vars_files:
  - vars/common.yml
  - vars/credentials_${host}.yml

  tasks:
  - name: configure badges wsgi script
    template: src=templates/opt_badges_badges_badges_production.wsgi.j2 dest=/opt/badges/badges/badges/production.py

  - name: run syncdb
    command: $badges_venv/bin/python /opt/badges/badges/manage.py syncdb --noinput

  - name: run migrate
    command: $badges_venv/bin/python /opt/badges/badges/manage.py migrate --noinput

  - name: run collectstatic
    command: $badges_venv/bin/python /opt/badges/badges/manage.py collectstatic --noinput

  - name: run compress
    command: $badges_venv/bin/python /opt/badges/badges/manage.py compress --force

  - name: configure badges vhost
    template: src=templates/etc_apache2_sites-available_badges.j2 dest=/etc/apache2/sites-available/badges

  - name: disable 000-default vhost
    command: /usr/sbin/a2dissite 000-default
    ignore_errors: yes
    notify:
    - restart apache

  - name: enable badges vhost
    command: /usr/sbin/a2ensite badges
    notify:
    - restart apache

  handlers:
  - name: restart apache
    service: name=apache2 state=restarted
